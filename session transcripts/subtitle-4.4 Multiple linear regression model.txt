As we can see in previous model, it is a more natural to include more than one predictor in regression models. The growth of response is determined by multifactors. In this video, we will apply Multiple Linear Regression model to generate a signal for the growth of SPY. The exchange-traded fund, which tracks S&P 500. We finally come to the most interesting part of this course. We will view the model using multiple indices from the global markets and predict the price change of SPY. The reason to choose SPY as a target to view the regression model is because it is very suitable for trading frequently. It is cheap. Each unit of SPY is always approximately one over 10 of S&P 500 index level. To earn SPY, it requires very low fee ratios. Volatility of SPY is very high. Two digits loss and gains race appears often. We will predict data price change of SPY when US market opens in the morning. We know that different indices in different markets are highly correlated. Using indices for other markets is good for prediction model of SPY. Secondly, different markets are in different time zones. For example, US market opens at 9:00 a.m and close at 4:00 p.m Eastern time today. Europe markets open at 3:00 a.m and close at 11:30 a.m Eastern time on the same day. That is, when US market opens, update data of Europe market is available. Asian markets including Australia open at around 8:00 p.m Eastern time yesterday and close at 3:00 a.m Eastern time today. That means the Asian market information is available for US market at its opening. In this video, we will use aud ordinaries from Australia, Nikkei from Japan, HSI from HK, DAX from Germany, CAC40 from France, S&P 500, Dji, and Nasdaq from US market, to predict the daily price change of SPY. In the next video, we will demonstrate how to use Prediction Model in paper trading. That is to trade using historical data. This data can be downloaded from Yahoo Finance easily. We did not use FTSE 100 from UK, which definitely is an important index, because it is now not available for downloading from Yahoo Finance. You use data frame from CSV to read assessing files of all indices and SPY. All data sets have six columns. Open is a price at the beginning. High, Low are the highest and lowest prices on that day. Close is a price at the chloro. Adjust close price is adjusted closing price that has been amended to include any disputions and corporate actions that occurred at any time before the next day's open. Volume is the number of shares traded on that day. In our demonstration, we will only use open price to simplify our discussion. Different from Simple Linear Regression, Multiple Linear Regression will have multiple predictors. Our response variable is open price of SPY tomorrow minus today's open. With this response, we expect to make a prediction in the morning in US market. Based on predict price change, we decide whether to long or short. Here, totally, we have eight predictors. Just a reminder, we cannot use any information available after the opening of a US market on current day to calculate predict values. In other words, these variables cannot be predictors. We will have three groups of predictors. The first group is a one-day lag variables from US market. Open minus open price of last day for SPY, Sp500, Nasdaq, and the Dji. The second group is a one-day lag variables from European markets. Open minus open price of last day for Cac40 and the Daxi. Ideally, for European markets, we want to use price at noon minus open price. If you have intraday data, you can improve this model. However, Yahoo Finance does not provide intraday data. Last group, close price minus open price of Aord, HSI, and the Nikkei in Asia, Australian markets. Next, we will mung the data to get all these predictors and the response. First, we generate an empty data frame and let the index to be the same as the index of SPY. Then, we add the contents of response and predictors we defined in last slide. Notice, in the last row of close, we keep a record of open price of SPY, which will be used in the next video. If we print the head of this table, we find missing values. This is due to two reasons. When we calculate price change, we may generate NaN value in the first row, one-day lag, and the last row, one-day in the future. In different markets, they may have different holidays in which the markets are closed. It can be shown by computing numbers of NaN values in each column. We find Australia markets seems to have more holidays. We need to handle NaN values first before we view the model. First, we use fill-forward method to fill the holes of data frame by propagating last valid observation forward to next valid. Second, we drop the first row by using dropna. We can check if there is any NaN remaining by computing numbers NaN values. From the printout, it is clear that we fill all holes. Finally, we save our clean data into data file indicepanel.csv using method to_csv of DataFrame. We will use this data in next video. We can print the measure of the data. Totally, we have 2,677 days of data, one response variable, nine predictors, and the last column keeps a record of open price of SPY, which will be used in paper trading. To make sure that our model is consistent in future data, we need to split data into two parts; one is for building the model, the other part is for testing the model to see if the model can still make reasonable prediction in this dataset. Stock data is very noisy comparing to other static data like images. We will use the equal size of samples for both train and test. We assign the most recent, 1,000 days at the test data and 1,000 days before the test at the training data. Firstly, we use a scatter matrix to get a pairwise scatterplot. If you check the scatterplots, which will response SPY with other nine predictors. You may find that, there is no explicit pattern, which is evidence of high noisy properties of stock markets. We need to compute correlation in order to see the association clearly. From the output of correlation, we find that the predictors for Europe and Asian markets do have association with SPY, which have higher impacts than predictors of U.S. markets. We can use OLS method of Statsmodels to build multiple linear equation model. The summary is printed out. There are a couple things we need to pay attention; the first thing is a p value for F-statistics. F test is for overall significance of the multiple linear equation model. If we reject, we accept alternative and it means that at least one of the predictors is useful. Our model is better fitted than intercept only model. P-value equal to 0.0106 in our model, which is less than 0.05 and it indicates that, our model includes useful predictors. Summary table also lists the p value for the test of significance of the individual predictors. From last video, we know that p value of test statistic used for this test. For our results, we find that, most of the predictors are not significant, except the Aord. That means all other predictors are useless information of SPY. It may be because of multicollinearity. Multicollinearity refers to a situation in which two or more predictors in the multiple regression model are highly, linearly related. One predictor can be predicted from the others with a substantial degree of accuracy and it is typical for our model since all indices of different markets are correlated. Multicollinearity does not reduce predictive power. In this situation, the coefficient estimates of the multiple equation may change erratically in response to small changes of data. Now, we can predict daily change of SPY using message predict of our model LM. We predict SPY in both train and test. We can further ensure scatterplot between real daily change and predict daily change of SPY. It does have positive correlation although not very strong. Considering it is daily change, this result is not very bad. Next, we will evaluate our models by comparing two statistics in train and test. First statistic is RMSE, which is the square root of sum of squared errors averaged by degrees of freedom, where k is number of predictors. This statistic is to measure the prediction error. The reason to use the degrees of freedom is that, square of RMSE is unbiased estimator of variance of the noise. The second is adjusted R-square. In Simple Linear Regression, we use R-square to get the percentage of variation that can be explained by a model. We found that by adding more predictors, the askew is always increasing, but the accuracy is even worse. To compensate the effects of numbers predictors, we have adjusted R-square, which measures percentage of variation of a response that is explained by the model. We will compute R-squared and RMSE in many practice and we do not want to run a similar course repeatedly. In python, the compacted this course under a function name, so that we use this course repeatedly just by referring to the function next. The keyword def is a keyword to define a function and return its keyword to offload your result from the inside of function. Functions to compute adjusted R-squared RMSE is given, where the parameter model is a model name and model k is the number of predictors. Y name is a column name of our response variable. Then, we compute adjust R-squared and RMSE for post train and test using function adjust metric. We give another function access table to generate output, which compared to R-square and RMSE between train and test. We compute RMSE and adjust R-square in both train and test in order to check whether they are different dramatically. If so, this is called overfitting. Usually, for overfitting model, RMSE and adjusted R-square is much better in train than in test dataset. That it implies that we cannot apply this model to real market in future. From output our model, RMSE increases in test, which is a bit worse than that in the train. I just ask where the test is batter. Overall, our model is not overfitted. Our R-square is only 1.5 percent, which is quite low, but in stock market it's not that bad. In next video, we will use predictive value of our model as a signal to buy and sell SPY in both train and test to check whether the signal could generate profit consistently.